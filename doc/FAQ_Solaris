============================================================
Frequently Asked Questions (FAQ) for PostgreSQL
Sun Solaris specific
to be read in conjunction with the installation instructions
============================================================
last updated:        $Date: 2003/10/09 17:11:13 $

current maintainer:  Peter Eisentraut <peter_e@gmx.net>


Contents:

1) What tools do I need to build and install PostgreSQL on Solaris?
2) Why do I get problems when building with OpenSSL support?
3) Why does configure complain about a failed test program?
4) Why does my 64-bit build sometimes crash?
5) How can I compile for optimum performance?

1) What tools do I need to build and install PostgreSQL on Solaris?

You will need

- GNU zip (for installing the documentation)
- GNU make
- GNU readline library (optional)
- GCC (if you don't have Sun's compiler)

If you like Solaris packages, you can find these tools here:
http://www.sunfreeware.com

If you prefer sources, look here:
http://www.gnu.org/order/ftp.html

You can build with either GCC or Sun's compiler suite.  We have heard
reports of problems when using gcc 2.95.1; gcc 2.95.3 or later is
recommended.  If you are using Sun's compiler, be careful *not* to
select /usr/ucb/cc; use /opt/SUNWspro/bin/cc.


2) Why do I get problems when building with OpenSSL support?

When you build PostgreSQL with OpenSSL support you might get
compilation errors in the following files:

src/backend/libpq/crypt.c
src/backend/libpq/password.c
src/interfaces/libpq/fe-auth.c
src/interfaces/libpq/fe-connect.c

This is because of a namespace conflict between the standard
/usr/include/crypt.h header and the header files provided by OpenSSL.

Upgrading your OpenSSL installation to version 0.9.6a fixes this
problem.


3) Why does configure complain about a failed test program?

This is probably a case of the run-time linker being unable to find
libz or some other non-standard library, such as libssl.  To point it
to the right location, set the LD_LIBRARY_PATH environment variable,
e.g.,

LD_LIBRARY_PATH=/usr/local/lib:/usr/local/ssl/lib
export LD_LIBRARY_PATH

and restart configure.  You will also have to keep this setting
whenever you run any of the installed PostgreSQL programs.

Alternatively, set the environment variable LD_RUN_PATH.  See the
ld(1) man page for more information.


4) Why does my 64-bit build sometimes crash?

On Solaris 7 and older, the 64-bit version of libc has a buggy vsnprintf
routine, which leads to erratic core dumps in PostgreSQL.  The simplest known
workaround is to force PostgreSQL to use its own version of vsnprintf rather
than the library copy.  To do this, after you run 'configure' edit a file
produced by configure:

In src/Makefile.global, change the line
    LIBOBJS =
to read
    LIBOBJS = snprintf.o

(There might be other files already listed in this variable.  Order
does not matter.)

Then build as usual.


5) How can I compile for optimum performance?

Try using the "-fast" compile flag.  The binaries might not be portable to
other Solaris systems, and you might need to compile everything that links
to PostgreSQL with "-fast", but PostgreSQL will run significantly faster,
50% faster on some tests.



